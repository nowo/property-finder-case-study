// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/cart/repository_cart/repository_cart.go

// Package repository_mocks is a generated GoMock package.
package repository_mocks

import (
	cart "property-finder-go-bootcamp-homework/internal/domain/cart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICartRepository is a mock of ICartRepository interface.
type MockICartRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICartRepositoryMockRecorder
}

// MockICartRepositoryMockRecorder is the mock recorder for MockICartRepository.
type MockICartRepositoryMockRecorder struct {
	mock *MockICartRepository
}

// NewMockICartRepository creates a new mock instance.
func NewMockICartRepository(ctrl *gomock.Controller) *MockICartRepository {
	mock := &MockICartRepository{ctrl: ctrl}
	mock.recorder = &MockICartRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICartRepository) EXPECT() *MockICartRepositoryMockRecorder {
	return m.recorder
}

// Complete repository_mocks base method.
func (m *MockICartRepository) Complete(userID, OrderID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Complete", userID, OrderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Complete indicates an expected call of Complete.
func (mr *MockICartRepositoryMockRecorder) Complete(userID, OrderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Complete", reflect.TypeOf((*MockICartRepository)(nil).Complete), userID, OrderID)
}

// CountByProductID repository_mocks base method.
func (m *MockICartRepository) CountByProductID(productID uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByProductID", productID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByProductID indicates an expected call of CountByProductID.
func (mr *MockICartRepositoryMockRecorder) CountByProductID(productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByProductID", reflect.TypeOf((*MockICartRepository)(nil).CountByProductID), productID)
}

// Create repository_mocks base method.
func (m *MockICartRepository) Create(newCart cart.Cart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", newCart)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockICartRepositoryMockRecorder) Create(newCart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockICartRepository)(nil).Create), newCart)
}

// Delete repository_mocks base method.
func (m *MockICartRepository) Delete(userID, productID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userID, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockICartRepositoryMockRecorder) Delete(userID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockICartRepository)(nil).Delete), userID, productID)
}

// GetCartsByUserID repository_mocks base method.
func (m *MockICartRepository) GetCartsByUserID(userID uint) ([]cart.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartsByUserID", userID)
	ret0, _ := ret[0].([]cart.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartsByUserID indicates an expected call of GetCartsByUserID.
func (mr *MockICartRepositoryMockRecorder) GetCartsByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartsByUserID", reflect.TypeOf((*MockICartRepository)(nil).GetCartsByUserID), userID)
}
